{
    "root": {
        "data": {
            "id": "root",
            "text": "计算机网络"
        },
        "children": [
            {
                "data": {
                    "note": "![image](https://b3logfile.com/siyuan/1616679307940/assets/1614686890050-efa625d6-cded-4def-803b-599eddb086a2-20210331224526-0h8jegi.png)\n传输层及以上是**进程之间**的通信，传输层以下是**主机之间**的通信。",
                    "id": "2fe77258-7fb0-41e1-8929-48ac1b05debe",
                    "text": "参考模型分层<br>"
                },
                "children": [
                    {
                        "data": {
                            "note": "1.解耦：各层之间相互独立，各自负责自己的功能，上层不需要知道底层的细节，只需要通过接口获取下层的服务\n2.灵活：只要功能和接口不变，某一层内部细节的变化对其他层不产生影响\n3.易于实现和标准化：把一个大问题分割成多个小问题，分而治之，利于实现",
                            "id": "770464485602",
                            "text": "为什么分层"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "1.**应用层**：用于**具体进程之间**的通信。\n\n常用协议：\n- 域名系统DNS：用于域名和ip地址相互映射\n- HTTP：用于浏览器和服务器交互和数据传输\n- FTP：文件传输协议\n- 电子邮件：SMTP、POP3\n\n数据单元：报文。\n\n2.**传输层**：主要负责提供两台主机**进程之间**(即端到端)的**通用**数据传输服务，通过**端口**为应用层的不同应用提供复用和分用功能。\n- 通用：是指并**不针对某一个特定的网络应用**，而是多种应用可以使用同一个运输层服务\n- 复用：是指多个应用层进程可同时使用传输层的服务\n- 分用：则是传输层把收到的信息分别交付给应用层中的不同进程。\n\n常用协议:\n- TCP：提供**面向连接**的，**可靠**的数据传输服务。数据单元：报文段\n- UDP：提供**无连接**的，**不可靠**(尽最大努力交付)的数据传输服务。数据单元：用户数据报\n\n3.**网络层**：实现异构网络的互联、路由选择和分组转发。网络层把传输层的数据封装成**IP数据报**，由于链路层**最大传输单元MTU**的限制，IP数据报切分为分组进行传送。常用协议：无连接的**网际协议**(Internet Protocol)和许多**路由选择协议(RIP/OSPF)**，**路由器**工作在网络层。\n\n4.**数据链路层**：给IP数据报添加首部和尾部，组装成帧，并保证**帧**在相邻节点间的**可靠传输**。每一帧包括数据和必要的**控制信息**（如同步信息，地址信息，差错控制(包括检错和纠错)等），**交换机**工作在数据链路层。\n\n5.**物理层**：比特流的透明传输，屏蔽具体传输介质和物理设备的具体细节，比特流表现为电压的高低，**网卡**、**集线器**工作在物理层。",
                            "id": "e2517b272255",
                            "text": "各层作用"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "通信过程可以看作一个打包拆包的过程。\n\n![](https://b3logfile.com/siyuan/1616679307940/assets/1607348550403-6ddc501f-14cb-4abf-8c0a-12d90d603479-20210331200724-sw7rmlw.png)\n\n主机之间的通信方式：C/S，P2P。",
                            "id": "8a28cfbe279b",
                            "text": "其他"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "32ad25d8987a",
                    "text": "应用层"
                },
                "children": [
                    {
                        "data": {
                            "note": "| 应用层协议 | 端口号 | 传输层协议 |           备注            |\n| :--------: | :----: | :--------: | :-----------------------: |\n|    DNS     |   53   |  UDP/TCP   | 长度超过512字节时使用 TCP |\n|    DHCP    | 67/68  |    UDP     |   目标地址67，源地址68    |\n|    FTP     | 20/21  |    TCP     | 控制连接 21，数据连接 20  |\n|    HTTP    |   80   |    TCP     |                           |\n|    SMTP    |   25   |    TCP     |                           |\n|    POP3    |  110   |    TCP     |                           |",
                            "id": "1d7ac2aff1d4",
                            "text": "常用应用层协议对应传输层协议和端口"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "\n功能：作为**将域名和IP地址相互映射的一个分布式数据库**。用于根据域名获取IP地址，是因特网的一项核心服务。\n传输层协议：UDP/TCP\n端口：53\n分布式数据库：每个站点只保留它自己那部分数据。\n\nDNS使用UDP进行传输，这要求域名解析器和域名服务器都必须自己处理超时和重传来保证可靠性。在以下情况会使用TCP进行传输：\n- 返回的响应超过512字节(UDP上限512字节)\n- 区域传送：主域名服务器向辅助域名服务器传送变化数据\n\n服务器分类：\n- 根域名服务器：知道所有顶级域名服务器的IP地址，全球13台\n- 顶级域名服务器：负责管理在其服务器注册的所有二级域名服务器\n- 授权域名服务器：能够将其管辖的主机名转换为该主机的IP地址\n- 本地域名服务器：本地网络提供商负责的域名服务器\n\n查询方式：\n- 递归查询：由查询的服务器发起下一次的查询\n- 递归与迭代结合：除第一次查询外，其余均由本地域名服务器向外查询",
                            "id": "42f44298-da0a-4ea6-8cfb-c179217de464",
                            "text": "DNS"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "1、客户机发出查询请求，在本机缓存查找，若没有找到，就会将请求发送给dns服务器\n\n2、本地dns服务器会在自己的区域里面查找，找到即根据此记录进行解析，若没有找到，就会在本地服务器的缓存里面查找\n\n3、本地服务器没有找到客户机查询的信息，就会将此请求发送到根域名dns服务器\n\n4、根域名服务器解析客户机请求的根域部分，它把包含的下一级的dns服务器的地址返回到客户机的dns服务器地址\n\n5、客户机的dns服务器根据返回的信息接着访问下一级的dns服务器\n\n6、这样递归的方法一级一级接近查询的目标，最后在有目标域名的服务器上面得到相应的IP信息\n\n7、客户机的本地的dns服务器会将查询结果返回给我们的客户机\n\n8、客户机根据得到的ip信息访问目标主机，完成解析过程",
                                    "id": "b02d90fe-64a4-4137-9cc7-e4a45d5075ae",
                                    "text": "DNS解析过程"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "note": "作用：DHCP (Dynamic Host Configuration Protocol) 提供了**即插即用**的连网方式，**用户不再需要手动配置 IP 地址等信息**。\n\n协议：**UDP**\n\nDHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。\n\nDHCP 工作过程如下：\n\n1.客户端发送 Discover 报文，探查能够为其提供IP的DHCP服务器。该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，该报文被广播到同一个子网的所有主机上。\n2.可用的DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，表示可以提供服务。若客户端收到多个 DHCP 服务器的应答，会在这些服务器中进行选择。\n3.客户端向选定的 DHCP 服务器发送 Request 报文，请求分配IP\n4.DHCP 服务器发送 ACK 报文对请求进行应答\n\n![](https://yeluoqianqiu.github.io/assets/DHCP%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B.png)",
                            "id": "a3a48e55e065",
                            "text": "DHCP"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "作用：允许用户在因特网上存取文件\n协议：TCP\n\nFTP需要两个连接来传送一个文件：\n\n- **控制连接**：服务器端端口号为21，用客户端发送命令和服务器应答\n- **数据连接**：用来传送文件数据\n\n根据数据连接是否是服务器端主动建立，FTP 有**主动**和**被动**两种模式：\n\n- 主动模式：服务器主动建立数据连接，向客户端发送或接收数据。数据连接的端口号：服务器为20，客户端在1024~65535之间指定。\n\n![](https://yeluoqianqiu.github.io/assets/ftp_active_mode.png)\n\n- 被动模式：客户端主动建立数据连接，向服务器发送或接收数据。数据链接的端口号：服务器随机，客户端在1024~65535之间指定。\n\n![](https://yeluoqianqiu.github.io/assets/ftp_passive_mode.png)\n\n主动模式要求客户端开放端口号给服务器端，需要配置客户端的防火墙。被动模式无需客户端配置防火墙，但服务器开放了过多的端口号，安全性减弱。",
                            "id": "985a0031d400",
                            "text": "FTP"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "126a897b2ce2",
                            "text": "电子邮件"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "作用：向邮件服务器主动发送电子邮件\n协议：TCP\n端口：25",
                                    "id": "5d7317cb6d12",
                                    "text": "SMTP"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "作用：向邮件服务器要求接收电子邮件\n协议：TCP\n端口：110",
                                    "id": "fc30e5a96df3",
                                    "text": "POP3"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "note": "HTTP(HyperText Transfer Protocol)，超文本传输协议。\n作用：规定了浏览器与服务器之间交互和数据传输的规则\n传输层协议：TCP，但HTTP本身是无连接的，即通信双方不需要建立所谓的HTTP连接。",
                            "id": "6348ebe8e8eaa16b61de0b77a4",
                            "text": "HTTP"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "1xx：指示信息--表示请求已接收，继续处理\n2xx：成功--表示请求已被成功接收、理解、接收\n3xx：重定向--要完成请求必须进行更进一步的操作\n4xx：客户端错误--请求有语法错误或者请求无法实现\n5xx：服务器端错误--服务器未能实现合法的请求\n\n常见状态码：\n200 OK：正常返回信息\n301 永久重定向\n302 临时重定向\n400 Bad Request：客户端请求有语法错误，不能被服务器所理解。\n401 Unauthorized：请求未经授权，这个状态码必须和WWW-Authenticate 报头域一起用。\n403 Forbidden：服务器收到请求但是拒绝提供服务。\n404 Not Found：请求资源不存在，eg：输入了错误的URL。\n500 Internal Server Error：服务器发生不可预期的错误。\n503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常。\n\n",
                                    "id": "cb568e7e-42e2-407b-ab62-45a3231b8956",
                                    "text": "状态码"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "6fc5daa4-a546-47d9-a588-1e972fc95777",
                                    "text": "HTTP的结构"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。\n而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：\nConnection:keep-alive\n在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。\nHTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。\n",
                                    "id": "485de719-546c-4881-91af-2e08d88a5c9e",
                                    "text": "长连接和短连接"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "Get：指定资源请求数据，刷新无害，Get请求的数据会附加到URL中，传输数据的大小受到url的限制。\n\nPost：向指定资源提交要被处理的数据。刷新会使数据会被重复提交。post在发送数据前会先将请求头发送给服务器进行确认，然后才真正发送数据。",
                                    "id": "ca2344112547",
                                    "text": "GET和POST区别"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "HTTP、HTTPS 区别\n端口 ：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。\n安全性和资源消耗： HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源。\n \n对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；\n非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。\n",
                                    "id": "453cb84b-3e2b-4cb5-a2a7-79cdfe950750",
                                    "text": "HTTP、HTTPS区别"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "1.浏览器将支持的加密算法信息发给服务器\n2.服务器选择一套浏览器支持的加密算法，以证书的形式回发给浏览器\n3.客户端(SSL/TLS)解析证书验证证书合法性，生成对称加密的密钥，我们将该密钥称之为client key，即客户端密钥，用服务器的公钥对客户端密钥进行非对称加密。\n4.客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端对称密钥发送给服务器\n5.服务器接收到客户端发来的密文之后，会用自己的私钥对其进行非对称解密，解密之后的明文就是客户端密钥，然后用客户端密钥对数据进行对称加密，这样数据就变成了密文。\n6.服务器将加密后的密文发送给客户端\n7.客户端收到服务器发送来的密文，用客户端密钥对其进行对称解密，得到服务器发送的数据。这样HTTPS中的第二个HTTP请求结束，整个HTTPS传输完成",
                                    "id": "d26ea44eafca",
                                    "text": "HTTPS的连接过程"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "长连接 : 在HTTP/1.0中，默认使用的是短连接，也就是说每次请求都要重新建立一次连接。HTTP 是基于TCP/IP协议的,每一次建立或者断开连接都需要三次握手四次挥手的开销，如果每次请求都要这样的话，开销会比较大。因此最好能维持一个长连接，可以用个长连接来发多个请求。HTTP 1.1起，默认使用长连接 ,默认开启Connection： keep-alive。 HTTP/1.1的持续连接有非流水线方式和流水线方式 。流水线方式是客户在收到HTTP的响应报文之前就能接着发送新的请求报文。与之相对应的非流水线方式是客户在收到前一个响应后才能发送下一个请求。\n错误状态响应码 :在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。\n缓存处理 :在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。\n带宽优化及网络连接的使用 :HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n\n",
                                    "id": "4a23fbf3-e77b-4871-b850-5d88c1cf1a16",
                                    "text": "HTTP 1.0、HTTP 1.1的区别"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "HTTP/2采用二进制格式而非文本格式\nHTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行，如ab两个文件可以同时传输\n使用报头压缩，HTTP/2降低了开销\nHTTP/2让服务器可以将响应主动“推送”到客户端缓存中\n\n",
                                    "id": "4292eb98-6714-4718-9838-ffe74d4fc60e",
                                    "text": "HTTP2.0"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "总体来说分为以下几个过程:\n\n1.浏览器查找域名对应的ip地址：`浏览器缓存--> hosts --> 路由器缓存 --> DNS解析`\n2.浏览器与服务器通过三次握手建立TCP连接\n3.浏览器发出HTTP请求：`GET /index.htm`\n4.服务器处理请求并返回HTTP响应报文\n5.如果不需要keep-alive维持长连接，双方通过四次挥手释放连接\n6.浏览器解析并渲染页面\n\n期间用到的协议：DNS、HTTP、TCP、IP、OSPF(路由选择协议)、ARP(ip地址转换为MAC地址)\n\n>  随着技术的深度和广度的增加，对这个问题的理解和回答也会越来越深入，后续应考虑到DHCP ARP解析MAC等等\n\nreference for detail：https://segmentfault.com/a/1190000006879700",
                                    "id": "8c66599a-3f1c-421d-b15f-44834878cdae",
                                    "text": "输入URL到显示页面的全过程"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "HTTP 是一种无状态（stateless）协议。也就是说 HTTP  协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，Session 的主要作用就是通过服务端记录用户的状态。典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个 Session，过了时间限制，就会销毁这个Session）。\n\n在服务端保存 Session 的方法很多，最常用的就是**内存和数据库**(比如使用内存数据库redis保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是通过在 Cookie 中附加一个 Session ID 来方式来跟踪。\n\n**Cookie 被禁用怎么办?**\n\n最常用的就是利用 URL 重写把 Session ID 直接附加在URL路径的后面。",
                                    "id": "3a90d483784d",
                                    "text": "HTTP是不保存状态的协议,如何保存用户状态?"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。\nCookie 一般用来保存用户信息 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。\nCookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。\nCookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在 Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。\n",
                                    "id": "5d9f6891-4c07-43a6-a13c-77526b38689e",
                                    "text": "Cookie和Session和Token"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "7f24a92ffe0f",
                            "text": "其他概念"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "URI：Uniform Resource Identifier，**包含 URL 和 URN**。\n\n- URL：Uniform Resource Locator，格式：`<协议>://<主机>:<端口>/<路径>`，如`http://localhost:8080/1.txt`，其中端口和路径可以省略，如或`http://www.baidu.com`\n- URN：Uniform Resource Name，如：`urn:isbn:0451450523",
                                    "id": "f470d69945f7",
                                    "text": "URL和URI"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "HyperText Markup Language，超文本标记语言。用于对网页的标记，对页面上的文字、声音、图像、视频等资源进行描述。",
                                    "id": "cf7ed3b00e33",
                                    "text": "HTML"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": " Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。\n",
                                    "id": "8ac5ec5e-b239-4e86-9b26-80e29acac307",
                                    "text": "Socket"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "0c91d9b9-357a-41d6-8978-850c68d7b2b4",
                                    "text": "抓包<br>"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "3ef9c36c-67d8-454f-bda8-c0a96e3fd8aa",
                                            "text": "抓包工具 wireshark"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "8beafe1f61d0",
                    "text": "传输层"
                },
                "children": [
                    {
                        "data": {
                            "note": "1.提供**进程之间**的通用数据传输服务，即端到端，而网络层是主机之间的逻辑通信。\n2.**复用和分用**。复用：发送端不同应用进程可以使用同一个的传输层协议传输数据；分用：接收方在传输层将收到的报文剥离首部后正确地交付给目的进程。\n3.对报文首部和数据进行差错检测。\n4.提供两种不同的传输协议：面向连接的TCP和无连接的UDP。并向上屏蔽了底层网络核心的细节，如网络拓扑、路由协议等。",
                            "id": "9bd2548ea809",
                            "text": "作用"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "6b48121e92da8593430f9b74b5",
                            "text": "TCP"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "TCP报文段包括首部和数据两部分，首部有**20个字节的固定长度**，根据需要可长达60字节。\n\nTCP报文段既可以用来运载数据，也可以用来建立连接、释放连接和应答。\n\n![image.png](https://b3logfile.com/siyuan/1616679307940/assets/image-20210411230944-27250te.png)\n\n下面是报文段首部各个字段的含义：\n\n1. **源端口以及目的端口**：各占2个字节。\n2. **序号**：seq，4字节。TCP是面向字节流的，即TCP连接会为传输数据流中的每一个字节编号，序号的值是**当前报文段的首字节的序号**。(如序号为301，携带数据一共100字节，则当前报文段的最后一个字节的序号为400，下一个报文段的序号值为401)。\n3. **确认号**：ack，4字节。期望收到对方的下一个报文段的首字节序号。只有ACK标记位为1时，确认序号字段才有效，因此，确认序号应该是上次已经成功收到数据字节序号加1，即 `ack=seq + 1`。\n4. **数据偏移**：4位，数据的起始偏移，也即TCP首部长度，单位为4字节，即当值为15时，达到TCP首部的最大长度60字节。\n5. **保留字段**：6位，值全为0。\n6. **标志位**：1为有效，0为无效\n\n- - URG(紧急)：urgent，URG=1时表明紧急指针字段有效，即此报文中有紧急数据，应优先交付，配合紧急指针字段使用。\n  - ACK(确认)：acknowledgement，ACK=1时此报文为确认报文\n  - PSH(推送)：push，PSH=1时，接收方应**尽快向上交付**，不等到整个缓存填满\n  - RST(复位)：reset，RST=1时表明TCP连接出现故障，必须重建连接\n  - SYN(同步)：synchronize，SYN=1时表示连接请求报文\n  - FIN(终止)：finish，FIN=1时为连接释放报文\n\n1. **窗口**：2字节，接收窗口，即接收方允许接收的最大数据量，接收方通过动态调整接收窗口大小，避免缓冲区溢出。(如接收方发送给接收方的报文，确认号701，窗口值1000，则表示还能接收1000字节的数据，即701~1700)\n2. **校验和**：2字节，范围包括首部和数据两部分，计算校验和时也需要加12字节的伪首部。\n3. 紧急指针：2字节，表示本报文段有多少字节的紧急数据，紧急数据在报文段数据的最前面。\n4. 选项：可选，默认没有，TCP最初只规定了一种选项，即最大报文段长度(Maximum Segment Size, MSS)。\n5. 填充：可选，用于保证整个首部的长度为4字节的整数倍。",
                                    "id": "f486b8f7c44f",
                                    "text": "报文段"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "![image.png](https://b3logfile.com/siyuan/1616679307940/assets/image-20210412002325-63f0nw0.png)\n- 客户端向服务端发送不带数据的连接请求报文并进入SYN_SENT状态，其报文首部标志位SYN=1，序号为随机产生的客户端初始序号seq=x。\n- 服务端收到请求后，若同意连接，则回复一个不带数据的确认报文并进入SYN_RCVD状态，其首部标志位ACK=1，SYN=1，确认号为ack=x+1，表示收到了序号为x的字节，期待下一个报文段数据的起始序号为x+1，序号为随机产生的服务端初始序号seq=y。\n- 客户端收到确认报文后，还需要向服务器回复确认报文，其首部标志位为ACK=1，确认号ack=y+1，序号seq=x+1。这个确认报文可以携带数据(如果不携带数据则不消耗序号，前两部不携带数据但需消耗一个序号)；服务器收到客户端的确认报文后，连接建立完成。\n\n> 早期版本，服务器在收到连接请求后便为本次TCP连接分配缓冲区等资源，客户端则是在收到服务器的确认报文后分配资源，服务器易遭受SYN洪泛攻击。后来采用了SYN cookie方式，服务器在握手完成时才分配资源。",
                                    "id": "d1dbdef8-dc91-4692-9b6b-69c520c42953",
                                    "text": "三次握手"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "note": "**三次握手是通信双方相互告知序号起始值， 并确认对方已经收到了序号起始值的必经步骤**。如果只是两次握手，只有客户端的起始序号能被确认收到，服务器的起始序号则得不到确认。\n\n有说是防止两次握手情况下，已经失效的连接请求报文段突然又传到服务端，而浪费资源。私以为不对。\n\n> 在老版本的TCP连接中，即使是三次握手，服务器在收到请求报文后就分配资源，在客户端无响应的一分钟后会释放资源，相比于两次握手，何来避免资源浪费的作用；新版本的TCP连接，服务器需要在建立连接后才分配资源，主要是为了防范洪泛攻击。",
                                            "id": "ec9d276c-2961-4ad4-ad26-e3f08556a3db",
                                            "text": "为什么要三次握手"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "note": "![image.png](https://b3logfile.com/siyuan/1616679307940/assets/image-20210412002421-1kh8vsa.png)\n\n**由于TCP连接是全双工的，因此每个方向都必须单独进行关闭**。当一方完成它的数据发送任务后就发送一个FIN来终止这个方向的连接。**TCP的一端收到一个FIN只意味着不会再收到另一端的数据，但仍能发送数据。**\n\n1. 客户端向服务端发送一个连接释放报文段，该报文段首部的标志位FIN=1，序号字段seq=u，u为客户端已发送的最后一个字节序号加1，此时客户端不再向服务器发送消息。\n2. 服务端收到连接释放报文段之后，立即回复确认报文段，首部的标志位ACK=1，确认号为ack=u+1，而其自己的序号为seq=v，即其之前发送的最后一个字节序号加1，此时，TCP连接处于半关闭状态，服务器还可以继续给客户端发送数据。\n3. 服务器不再需要发送数据后，会向客户端发送FIN=1，ACK=1的连接释放报文段，序号seq=w，确认号ack=u+1。\n4. 客户端收到连接释放报文后，向客户端回复确认ACK=1的报文段，确认号为ack=w+1，序号为seq=u+1。此时客户端进入TIME_WAIT状态，而服务端收到确认报文段后便进入了关闭状态，客户端需要等待2MSL(Maximum Segment Lifetime最大报文生存时间，超时的报文会被丢弃)才关闭。",
                                    "id": "938c9f7a45a3",
                                    "text": "四次挥手"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "note": "服务器收到了客户端的连接释放报文后，可能还需要继续向客户端发送数据，所以只能先回一个确认报文，传送完毕之后，服务器才发送连接释放报文。\n\n",
                                            "id": "7c6397a4-1209-4b31-a4f2-7d9320e50987",
                                            "text": "为什么要四次挥手"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "note": "1.确保最后一个确认报文能够到达。如果 B 没收到 A 发送的确认报文，那么B就会重新发送连接释放报文，A收到后重发确认报文，然后刷新2MSL的等待时间。\n2.还可以让本连接持续时间内所产生的所有报文失效，使得下一个新的连接不会出现旧的连接请求报文。",
                                            "id": "46e19076-a6c3-4cfd-8f68-7c64dddb9d6b",
                                            "text": "为什么客户端需要等待2MSL"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "note": "可靠性一般包括无差错，不丢失，不重复，有序这几个语义。\n\n1.**校验和**： 对报文的伪首部、首部和数据进行二进制反码运算求和再取反，然后与首部内的校验和比对。校验和有误的报文会被丢弃。\n2.**序号和确认号**：TCP面向字节流，会为每一个字节编号，序号是当前报文的数据中首字节的序号，确认号是期待对方发来的下一个报文的首字节序号。TCP的两端都有缓存区，会将收到的报文整理有序后发给应用层，收到重复的报文会将其丢弃，而收到乱序数据会缓存起来，并重传期待收到的序号，即冗余ACK。\n3.**超时重传**：发送方为每一个发送的报文段设置一个计时器，计时器设置的重传时间到期后，未收到接收方的确认，会重传该报文段。超时重传时间略大于加权平均往返时间。\n4.**快重传**：TCP规定接收方每当比期望序号大的失序报文到达时，就发送一个冗余ACK，指明下一个期待字节的序号；当发送方收到对同一个报文段的3个冗余ACK时，就会认为之前发送的报文已经丢失，重传冗余ACK指定的报文。快重传即不需要等到重传时间超时就重传，还用于拥塞控制中。\n5.**流量控制**： 流量控制是**接收方主动避免缓冲区溢出**，通过**滑动窗口**机制实现。TCP 连接双方都有固定大小的缓冲区，接收方用一个可动态调整的**接收窗口**(rwnd)表示当前缓冲区能接收的最大字节数，从而限制发送方的发送速率，避免缓冲区溢出而丢失数据。窗口大小值记录在报文首部的窗口字段中。\n6.**拥塞控制**： 拥塞控制是**发送方主动监测网络变化控制拥塞窗口(cwnd)大小**，避免过多数据注入网络中，造成网络拥塞。拥塞控制是一个**全局性**的过程，涉及到所有的主机、路由器等节点。TCP的拥塞控制采用了四种算法，即 **慢开始** 、 **拥塞避免** 、**快重传** 和 **快恢复**。\n\n   1.慢开始和拥塞避免：基于超时重传时间，先使用慢开始，初始时令cwnd=1MSS(最大报文长度)，每收到一个确认报文，将cwnd翻倍，超过**慢开始阈值(ssthresh)**后，使用拥塞避免算法，每收到一个确认报文，cwnd+1MSS(线性增长)，无论是在慢开始阶段还是拥塞避免阶段，若遇到超时，令ssthresh=cwnd/2，cwnd=1MSS，再次慢开始到拥塞避免的过程。\n   2.**快重传与快恢复**：**基于冗余ACK机制**，当发送方连续收到三个冗余ACK，直接重传对方尚未收到的报文段，并令ssthresh=cwnd/2，cwnd=ssthresh，而非令cwnd=1MSS，因此叫快恢复。",
                                    "id": "a3a014ed-0620-4a91-bd76-ea8c57699990",
                                    "text": "TCP 如何实现可靠传输"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "TCP面向字节流，因此多个小尺寸数据可能被封装在一个tcp报文中发出去。\n可以简单的理解成客户端调用了两次send，服务器端一个recv就把信息都读出来了。\n\n处理方法：固定发送信息长度，或在两个信息之间加入分隔符。",
                                    "id": "43b143b1c83a",
                                    "text": "TCP黏包"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "TCP握手中，当服务器处于SYN_RCVD 状态，服务器会把此种状态下请求连接放在一个队列里，该队列称为半连接队列。\n\nSYN洪泛攻击即利用TCP协议缺陷，通过发送大量的半连接请求，占用半连接队列，耗费CPU和内存资源。\n\n优化方式：\n- 缩短SYN Timeout时间 \n- 记录IP，若连续受到某个IP的重复SYN报文，从这个IP地址来的包会被一概丢弃。",
                                    "id": "66ee93d34c55",
                                    "text": "半连接与SYN洪泛攻击"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "da4e64f2-6d4b-48e8-8ff0-ddbfb790766a",
                            "text": "UDP"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "![image.png](https://b3logfile.com/siyuan/1616679307940/assets/image-20210411230859-xlt2vn4.png)\n\nUDP数据报由首部和数据组成，首部 **8 个字节**，由4部分组成：源端口、目的端口、数据报总长、校验和。\n\n在计算校验和时，需要在UDP数据报之前临时添加12 字节的**伪首部**，用这个临时的UDP数据报计算校验和，可以同时对UDP数据报、IP数据报的源地址和目的地址进行检验。校验和的计算方法：首部、伪首部、数据进行二进制反码运算求和再取反。\n\nUDP数据包的校验将首部和数据都进行了检验，而IP数据报的校验只检验IP数据报的首部。",
                                    "id": "5170f288d939",
                                    "text": "用户数据报"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "![image](https://b3logfile.com/siyuan/1616679307940/assets/1614686890042-40253585-9c8d-473c-8e06-d54fa4e7dcaf-20210331224205-yg0l6n5.jfif)\n\n- 可靠性：TCP面向连接，可靠(无差错，不丢失，不重复，按序到达)；UDP无连接，不可靠\n- 传输形式：TCP**面向字节流**，UDP**面向报文**。面下字节流即将应用层的报文看成无结构的字节流，而面向报文即对应用层的报文不合并也不拆分，只是添加UDP首部；\n- 性能：TCP为了可靠性需要更多额外开销(连接的创建、维护和拆除、超时重传、拥塞控制、流量控制)和系统资源，吞吐量、实时性都不如UDP\n- 首部：TCP首部20~60字节，UDP则是8字节，TCP需要更多的数据开销\n- 连接形式：TCP是一对一的，UDP则支持一对多，多对一和多对多的通信\n- 应用场景：TCP用于需要通信数据可靠的场景：HTTP/FTP/SMTP等；UDP用于对实时性要求高，而对可靠性要求不高的场景：DNS、视频流、语音通话、竞技游戏",
                                    "id": "55bafa6d-9e2d-443b-b56b-741153d5df97",
                                    "text": "UDP与TCP协议的区别"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "87fcd5eb18ea",
                    "text": "网络层"
                },
                "children": []
            },
            {
                "data": {
                    "id": "fb509a6d8c3d",
                    "text": "数据链路层"
                },
                "children": [
                    {
                        "data": {
                            "note": "自动重传请求（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层的错误纠正协议之一。它通过使用确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间之内没有收到确认帧，它通常会重新发送。ARQ包括停止等待ARQ协议和连续ARQ协议。\n",
                            "id": "16a6bc7b-4222-4484-b5f5-4aef7765d128",
                            "text": "ARQ协议"
                        },
                        "children": [
                            {
                                "data": {
                                    "note": "停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下一个分组；\n在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；\n \n优点： 简单\n缺点： 信道利用率低，等待时间长\n \n1) 无差错情况:\n发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。\n2) 出现差错情况（超时重传）:\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 自动重传请求 ARQ 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。\n3) 确认丢失和确认迟到\n确认丢失 ：确认消息在传输过程丢失。当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。\n确认迟到 ：确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。\n\n",
                                    "id": "b101d96b-ff85-498f-82e7-1680e7c43103",
                                    "text": "停止等待ARQ协议"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "note": "连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。\n \n优点： 信道利用率高，容易实现，即使确认丢失，也不必重传。\n缺点： 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。\n",
                                    "id": "c3a63390-7720-48e6-a213-e9d16a2b3d0d",
                                    "text": "连续ARQ协议"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "note": "MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。\n\n一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。",
                            "id": "9fb13f3c1903",
                            "text": "MAC地址"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。\n\n主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。\n\n可以按照网络拓扑结构对局域网进行分类：星型、环形、直线型",
                            "id": "cb03453f15ae",
                            "text": "局域网"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "note": "以太网是一种星型拓扑结构局域网。\n\n早期使用集线器进行连接，集线器是一种物理层设备， 作用于比特而不是帧，当一个比特到达接口时，集线器重新生成这个比特，并将其能量强度放大，从而扩大网络的传输距离，之后再将这个比特发送到其它所有接口。如果集线器同时收到两个不同接口的帧，那么就发生了碰撞。\n\n目前以太网使用交换机替代了集线器，交换机是一种链路层设备，它不会发生碰撞，能根据 MAC 地址进行存储转发。\n\n以太网帧格式：\n\n- **类型**  ：标记上层使用的协议；\n- **数据**  ：长度在 46-1500 之间，如果太小则需要填充；\n- **FCS**  ：帧检验序列，使用的是 CRC 检验方法；",
                            "id": "4d180fa5a1d6",
                            "text": "以太网"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue-compat",
    "version": "1.4.43"
}